"use strict";(self.webpackChunkspiceaidocs=self.webpackChunkspiceaidocs||[]).push([[2472],{2981:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var i=t(4848),s=t(8453);const a={title:"Constraints",sidebar_label:"Constraints",sidebar_position:2,description:"Learn how to add/configure constraints on local acceleration tables in Spice."},r=void 0,c={id:"features/data-acceleration/constraints",title:"Constraints",description:"Learn how to add/configure constraints on local acceleration tables in Spice.",source:"@site/docs/features/data-acceleration/constraints.md",sourceDirName:"features/data-acceleration",slug:"/features/data-acceleration/constraints",permalink:"/features/data-acceleration/constraints",draft:!1,unlisted:!1,editUrl:"https://github.com/spiceai/docs/tree/trunk/spiceaidocs/docs/features/data-acceleration/constraints.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Constraints",sidebar_label:"Constraints",sidebar_position:2,description:"Learn how to add/configure constraints on local acceleration tables in Spice."},sidebar:"docsSidebar",previous:{title:"Indexes",permalink:"/features/data-acceleration/indexes"},next:{title:"Results Caching",permalink:"/features/caching/"}},o={},l=[{value:"Column References",id:"column-references",level:2},{value:"Limitations",id:"limitations",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Constraints are rules that enforce data integrity in a database. Spice supports constraints on locally accelerated tables to ensure data quality, as well as configuring the behavior for inserting data updates that violate constraints."}),"\n",(0,i.jsxs)(n.p,{children:["Constraints are specified in the Spicepod via the ",(0,i.jsx)(n.code,{children:"primary_key"})," field in the acceleration configuration. Additional unique constraints are specified via the ",(0,i.jsx)(n.a,{href:"/features/data-acceleration/indexes",children:(0,i.jsx)(n.code,{children:"indexes"})})," field with the value ",(0,i.jsx)(n.code,{children:"unique"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The behavior of inserting data that violates the constraint can be configured via the ",(0,i.jsx)(n.code,{children:"on_conflict"})," field to either ",(0,i.jsx)(n.code,{children:"drop"})," the data that violates the constraint or ",(0,i.jsx)(n.code,{children:"upsert"})," that data into the accelerated table (i.e. update all values other than the columns that are part of the constraint to match the incoming data)."]}),"\n",(0,i.jsx)(n.p,{children:"If there are multiple rows in the incoming data that violate any constraint, the entire incoming batch of data will be dropped."}),"\n",(0,i.jsx)(n.p,{children:"Example Spicepod:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'datasets:\n  - from: spice.ai/eth.recent_blocks\n    name: eth.recent_blocks\n    acceleration:\n      enabled: true\n      engine: sqlite\n      primary_key: hash # Define a primary key on the `hash` column\n      indexes:\n        \'(number, timestamp)\': unique # Add a unique index with a multicolumn key comprised of the `number` and `timestamp` columns\n      on_conflict:\n        # Upsert the incoming data when the primary key constraint on "hash" is violated,\n        # alternatively "drop" can be used instead of "upsert" to drop the data update.\n        hash: upsert\n'})}),"\n",(0,i.jsx)(n.h2,{id:"column-references",children:"Column References"}),"\n",(0,i.jsx)(n.p,{children:"Column references can be used to specify which columns are part of the constraint. The column reference can be a single column name or a multicolumn key. The column reference must be enclosed in parentheses if it is a multicolumn key."}),"\n",(0,i.jsx)(n.p,{children:"Examples"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"number"}),": Reference a constraint on the ",(0,i.jsx)(n.code,{children:"number"})," column"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"(hash, timestamp)"}),": Reference a constraint on the ",(0,i.jsx)(n.code,{children:"hash"})," and ",(0,i.jsx)(n.code,{children:"timestamp"})," columns"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"limitations",children:"Limitations"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Not supported for in-memory Arrow:"})," The default in-memory Arrow acceleration engine does not support constraints. Use ",(0,i.jsx)(n.a,{href:"/components/data-accelerators/duckdb",children:"DuckDB"}),", ",(0,i.jsx)(n.a,{href:"/components/data-accelerators/duckdb",children:"SQLite"}),", or ",(0,i.jsx)(n.a,{href:"/components/data-accelerators/postgres/",children:"PostgreSQL"})," as the acceleration engine to enable constraint checking."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Single on_conflict target supported"}),": Only a single ",(0,i.jsx)(n.code,{children:"on_conflict"})," target can be specified, unless all ",(0,i.jsx)(n.code,{children:"on_conflict"})," targets are specified with drop."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(t,{children:[(0,i.jsxs)("summary",{children:["Examples for valid/invalid ",(0,i.jsx)(n.code,{children:"on_conflict"})," targets"]}),(0,i.jsxs)("div",{children:[(0,i.jsxs)(n.p,{children:["The following Spicepod is invalid because it specifies multiple ",(0,i.jsx)(n.code,{children:"on_conflict"})," targets with ",(0,i.jsx)(n.code,{children:"upsert"}),":"]}),(0,i.jsx)(n.admonition,{title:"Invalid",type:"danger",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'datasets:\n\n- from: spice.ai/eth.recent_blocks\n  name: eth.recent_blocks\n  acceleration:\n  enabled: true\n  engine: sqlite\n  primary_key: hash\n  indexes:\n  "(number, timestamp)": unique\n  on_conflict:\n  hash: upsert\n  "(number, timestamp)": upsert\n'})})}),(0,i.jsxs)(n.p,{children:["The following Spicepod is valid because it specifies multiple ",(0,i.jsx)(n.code,{children:"on_conflict"})," targets with ",(0,i.jsx)(n.code,{children:"drop"}),", which is allowed:"]}),(0,i.jsx)(n.admonition,{title:"Valid",type:"tip",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'datasets:\n\n- from: spice.ai/eth.recent_blocks\n  name: eth.recent_blocks\n  acceleration:\n  enabled: true\n  engine: sqlite\n  primary_key: hash\n  indexes:\n  "(number, timestamp)": unique\n  on_conflict:\n  hash: drop\n  "(number, timestamp)": drop\n'})})}),(0,i.jsxs)(n.p,{children:["The following Spicepod is invalid because it specifies multiple ",(0,i.jsx)(n.code,{children:"on_conflict"})," targets with ",(0,i.jsx)(n.code,{children:"upsert"})," and ",(0,i.jsx)(n.code,{children:"drop"}),":"]}),(0,i.jsx)(n.admonition,{title:"Invalid",type:"danger",children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:'datasets:\n\n- from: spice.ai/eth.recent_blocks\nname: eth.recent_blocks\nacceleration:\nenabled: true\nengine: sqlite\nprimary_key: hash\nindexes:\n"(number, timestamp)": unique\non_conflict:\nhash: upsert\n"(number, timestamp)": drop\n'})})})]})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"DuckDB Limitations:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["DuckDB does not support ",(0,i.jsx)(n.code,{children:"upsert"})," for datasets with List or Map types."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Standard indexes unexpectedly act like unique indexes and block updates when ",(0,i.jsx)(n.code,{children:"upsert"})," is configured."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Standard indexes blocking updates"}),(0,i.jsxs)("div",{children:[(0,i.jsxs)(n.p,{children:["The following Spicepod specifies a standard index on the ",(0,i.jsx)(n.code,{children:"number"})," column, which blocks updates when ",(0,i.jsx)(n.code,{children:"upsert"})," is configured for the ",(0,i.jsx)(n.code,{children:"hash"})," column:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"datasets:\n  - from: spice.ai/eth.recent_blocks\n    name: eth.recent_blocks\n    acceleration:\n      enabled: true\n      engine: duckdb\n      primary_key: hash\n      indexes:\n        number: enabled\n      on_conflict:\n        hash: upsert\n"})}),(0,i.jsxs)(n.p,{children:["The following error is returned when attempting to upsert data into the ",(0,i.jsx)(n.code,{children:"eth.recent_blocks"})," table:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"ERROR runtime::accelerated_table::refresh: Error adding data for eth.recent_blocks: External error:\nUnable to insert into duckdb table: Binder Error: Can not assign to column 'number' because\nit has a UNIQUE/PRIMARY KEY constraint\n"})}),(0,i.jsx)(n.p,{children:"This is a limitation in DuckDB."})]})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var i=t(6540);const s={},a=i.createContext(s);function r(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);