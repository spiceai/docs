"use strict";(self.webpackChunkspiceaidocs=self.webpackChunkspiceaidocs||[]).push([[9018],{8752:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var t=s(4848),r=s(8453);const o={title:"Environment Secret Store",sidebar_label:"Environment Secret Store",sidebar_position:1,description:"Environment Variables Secret Store Documentation",pagination_prev:null},i=void 0,c={id:"components/secret-stores/env/index",title:"Environment Secret Store",description:"Environment Variables Secret Store Documentation",source:"@site/docs/components/secret-stores/env/index.md",sourceDirName:"components/secret-stores/env",slug:"/components/secret-stores/env/",permalink:"/components/secret-stores/env/",draft:!1,unlisted:!1,editUrl:"https://github.com/spiceai/docs/tree/trunk/spiceaidocs/docs/components/secret-stores/env/index.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Environment Secret Store",sidebar_label:"Environment Secret Store",sidebar_position:1,description:"Environment Variables Secret Store Documentation",pagination_prev:null},sidebar:"docsSidebar",next:{title:"AWS Secrets Manager Secret Store",permalink:"/components/secret-stores/aws-secrets-manager/"}},a={},l=[{value:".env Files",id:"env-files",level:2},{value:"Additional Parameters",id:"additional-parameters",level:3}];function d(e){const n={code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"env"})," store type enables Spice to read secrets from environment variables and any ",(0,t.jsx)(n.code,{children:".env.local"})," or ",(0,t.jsx)(n.code,{children:".env"})," files in the project directory. This is the default secret store and is loaded automatically as:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"secrets:\n  - from: env\n    name: env\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Reference secrets directly in parameters using the syntax ",(0,t.jsx)(n.code,{children:"${env:MY_ENV_VAR}"}),". This will load the value of the environment variable ",(0,t.jsx)(n.code,{children:"MY_ENV_VAR"})," into the parameter."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"datasets:\n  - from: postgres:my_table\n    name: my_table\n    params:\n      pg_host: localhost\n      pg_port: 5432\n      pg_user: ${env:MY_PG_USER}\n      pg_pass: ${env:MY_PG_PASSWORD}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"${}"})," replacement syntax also works within a larger string, like a connection string:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"datasets:\n  - from: mysql:my_table\n    name: my_table\n    params:\n      connection_string: mysql://${env:MY_USER}:${env:MY_PASSWORD}@localhost:3306/my_db\n"})}),"\n",(0,t.jsxs)(n.p,{children:["When used with the ",(0,t.jsx)(n.code,{children:"${secrets:<my_key>}"})," syntax, the ",(0,t.jsx)(n.code,{children:"<my_key>"})," variable is UPPERCASED to follow the convention of environment variables."]}),"\n",(0,t.jsx)(n.p,{children:"Example:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"datasets:\n  - from: postgres:my_table\n    name: my_table\n    params:\n      pg_host: localhost\n      pg_port: 5432\n      pg_user: ${secrets:my_pg_user} # same as ${env:MY_PG_USER}\n      pg_pass: ${secrets:my_pg_password} # same as ${env:MY_PG_PASSWORD}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"env-files",children:".env Files"}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"env"})," secret store reads secrets from any ",(0,t.jsx)(n.code,{children:".env.local"})," or ",(0,t.jsx)(n.code,{children:".env"})," files in the project directory. The ",(0,t.jsx)(n.code,{children:".env.local"})," file takes precedence over the ",(0,t.jsx)(n.code,{children:".env"})," file. This enables defining template secrets in the ",(0,t.jsx)(n.code,{children:".env"})," file which can be checked into source control and overriding them with local secrets in the ",(0,t.jsx)(n.code,{children:".env.local"})," file."]}),"\n",(0,t.jsxs)(n.p,{children:["Example ",(0,t.jsx)(n.code,{children:".env"})," file:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-env",children:"MY_PG_USER=postgres\nMY_PG_PASSWORD=postgres\n"})}),"\n",(0,t.jsx)(n.h3,{id:"additional-parameters",children:"Additional Parameters"}),"\n",(0,t.jsxs)(n.p,{children:["To load environment variables from a specific ",(0,t.jsx)(n.code,{children:".env"})," file, use the ",(0,t.jsx)(n.code,{children:"file_path"})," parameter. When using specific environment variable file using ",(0,t.jsx)(n.code,{children:"file_path"})," environment variables from the default ",(0,t.jsx)(n.code,{children:".env"})," or ",(0,t.jsx)(n.code,{children:".env.local"})," files will not be loaded."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-yaml",children:"secrets:\n  - from: env\n    name: env\n    params:\n      file_path: /custom/path/to/.env\n"})})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>c});var t=s(6540);const r={},o=t.createContext(r);function i(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);