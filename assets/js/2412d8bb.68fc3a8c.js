"use strict";(self.webpackChunkspiceaidocs=self.webpackChunkspiceaidocs||[]).push([[1940],{9374:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>i});var a=n(4848),c=n(8453);const o={title:"DuckDB Data Connector",sidebar_label:"DuckDB Data Connector",description:"DuckDB Data Connector Documentation"},r=void 0,s={id:"data-connectors/duckdb",title:"DuckDB Data Connector",description:"DuckDB Data Connector Documentation",source:"@site/docs/data-connectors/duckdb.md",sourceDirName:"data-connectors",slug:"/data-connectors/duckdb",permalink:"/data-connectors/duckdb",draft:!1,unlisted:!1,editUrl:"https://github.com/spiceai/docs/tree/trunk/spiceaidocs/docs/data-connectors/duckdb.md",tags:[],version:"current",frontMatter:{title:"DuckDB Data Connector",sidebar_label:"DuckDB Data Connector",description:"DuckDB Data Connector Documentation"},sidebar:"docsSidebar",previous:{title:"Dremio Data Connector",permalink:"/data-connectors/dremio"},next:{title:"Flight SQL Data Connector",permalink:"/data-connectors/flightsql"}},d={},i=[{value:"Dataset Source",id:"dataset-source",level:2},{value:"Configuration",id:"configuration",level:2}];function l(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.h2,{id:"dataset-source",children:"Dataset Source"}),"\n",(0,a.jsxs)(t.p,{children:["To connect to a DuckDB ",(0,a.jsx)(t.a,{href:"https://duckdb.org/docs/connect/overview#persistent-database",children:"persistent database"})," as a data source, specify ",(0,a.jsx)(t.code,{children:"duckdb"})," as the selector in the ",(0,a.jsx)(t.code,{children:"from"})," value for the dataset."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",children:"datasets:\n  - from: duckdb:database.schema.table\n    name: my_dataset\n"})}),"\n",(0,a.jsx)(t.h2,{id:"configuration",children:"Configuration"}),"\n",(0,a.jsxs)(t.p,{children:["The DuckDB data connector can be configured by providing the following ",(0,a.jsx)(t.code,{children:"params"}),":"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"open"}),": The name for the file to back the DuckDB database. ",(0,a.jsx)(t.code,{children:"open"})," is a required parameter, and DuckDB run in the ",(0,a.jsx)(t.code,{children:"file"})," mode to open the DuckDB database file."]}),"\n"]}),"\n",(0,a.jsxs)(t.p,{children:["Configuration ",(0,a.jsx)(t.code,{children:"params"})," are provided either in the top level ",(0,a.jsx)(t.code,{children:"dataset"})," for a dataset source, or in the ",(0,a.jsx)(t.code,{children:"acceleration"})," section for a data store."]}),"\n",(0,a.jsx)(t.p,{children:"A generic example of DuckDB data connector configuration."}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",children:"datasets:\n  - from: duckdb:database.schema.table\n    name: my_dataset\n    params:\n      open: path/to/duckdb_file.duckdb\n"})}),"\n",(0,a.jsx)(t.p,{children:"This example uses a DuckDB database file that is at location /my/path/"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-yaml",children:"datasets:\n  - from: duckdb:sample_data.nyc.rideshare\n    name: nyc_rideshare\n    params:\n      open: /my/path/my_database.db\n"})})]})}function u(e={}){const{wrapper:t}={...(0,c.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>s});var a=n(6540);const c={},o=a.createContext(c);function r(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:r(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);