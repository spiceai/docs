"use strict";(self.webpackChunkspiceaidocs=self.webpackChunkspiceaidocs||[]).push([[7704],{3026:(e,d,t)=>{t.r(d),t.d(d,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>n,metadata:()=>c,toc:()=>x});var s=t(4848),i=t(8453);const n={title:"Data Types",sidebar_label:"Data Types",sidebar_position:3,pagination_prev:"reference/index",pagination_next:null},r=void 0,c={id:"reference/datatypes",title:"Data Types",description:"Spice adheres to Apache Arrow data types. Data accelerators do not support all Arrow data types. The table below outlines the data type compatibility for each accelerator, and datatype used within the accelerator.",source:"@site/docs/reference/datatypes.md",sourceDirName:"reference",slug:"/reference/datatypes",permalink:"/reference/datatypes",draft:!1,unlisted:!1,editUrl:"https://github.com/spiceai/docs/tree/trunk/spiceaidocs/docs/reference/datatypes.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Data Types",sidebar_label:"Data Types",sidebar_position:3,pagination_prev:"reference/index",pagination_next:null},sidebar:"docsSidebar",previous:{title:"Reference",permalink:"/reference/"}},l={},x=[];function j(e){const d={a:"a",code:"code",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(d.p,{children:["Spice adheres to Apache Arrow data ",(0,s.jsx)(d.a,{href:"https://docs.rs/arrow/latest/arrow/datatypes/index.html",children:"types"}),". Data accelerators do not support all Arrow data types. The table below outlines the data type compatibility for each accelerator, and datatype used within the accelerator."]}),"\n",(0,s.jsxs)(d.table,{children:[(0,s.jsx)(d.thead,{children:(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.th,{children:"Arrow Type"}),(0,s.jsx)(d.th,{children:"Description"}),(0,s.jsx)(d.th,{children:(0,s.jsx)(d.a,{href:"https://duckdb.org/docs/sql/data_types/overview",children:"DuckDB"})}),(0,s.jsx)(d.th,{children:(0,s.jsx)(d.a,{href:"https://sqlite.org/datatype3.html",children:"SQLite"})}),(0,s.jsx)(d.th,{children:(0,s.jsx)(d.a,{href:"https://www.postgresql.org/docs/current/datatype.html#DATATYPE-TABLE",children:"Postgres"})})]})}),(0,s.jsxs)(d.tbody,{children:[(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"na"}),(0,s.jsx)(d.td,{children:"A NULL type having no physical storage."}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"bool"}),(0,s.jsx)(d.td,{children:"Boolean as 1 bit, LSB bit-packed ordering."}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"BOOLEAN"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"BOOL"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"BOOL"})})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"uint8"}),(0,s.jsx)(d.td,{children:"Unsigned 8-bit little-endian integer."}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"TINYINT"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"TINYINT"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"SMALLINT"})})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"int8"}),(0,s.jsx)(d.td,{children:"Signed 8-bit little-endian integer."}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"TINYINT"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"TINYINT"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"SMALLINT"})})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"uint16"}),(0,s.jsx)(d.td,{children:"Unsigned 16-bit little-endian integer."}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"SMALLINT"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"SMALLINT"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"SMALLINT"})})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"int16"}),(0,s.jsx)(d.td,{children:"Signed 16-bit little-endian integer."}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"SMALLINT"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"SMALLINT"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"SMALLINT"})})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"uint32"}),(0,s.jsx)(d.td,{children:"Unsigned 32-bit little-endian integer."}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"INTEGER"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"INT"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"INTEGER"})})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"int32"}),(0,s.jsx)(d.td,{children:"Signed 32-bit little-endian integer."}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"INTEGER"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"INT"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"INTEGER"})})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"uint64"}),(0,s.jsx)(d.td,{children:"Unsigned 64-bit little-endian integer."}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"BIGINT"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"BIGINT"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"BIGINT"})})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"int64"}),(0,s.jsx)(d.td,{children:"Signed 64-bit little-endian integer."}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"BIGINT"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"BIGINT"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"BIGINT"})})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"half_float"}),(0,s.jsx)(d.td,{children:"2-byte floating point value"}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"float"}),(0,s.jsx)(d.td,{children:"4-byte floating point value"}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"FLOAT"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"FLOAT"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"REAL"})})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"double"}),(0,s.jsx)(d.td,{children:"8-byte floating point value"}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"DOUBLE"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"DOUBLE"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"DOUBLE PRECISION"})})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"string"}),(0,s.jsx)(d.td,{children:"UTF8 variable-length string as List<Char>"}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"VARCHAR"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"TEXT"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"TEXT"})})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"binary"}),(0,s.jsx)(d.td,{children:"Variable-length bytes (no guarantee of UTF8-ness)"}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"fixed_size_binary"}),(0,s.jsx)(d.td,{children:"Each value has equal bytes of binary."}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"date32"}),(0,s.jsx)(d.td,{children:"int32_t days since the UNIX epoch"}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"DATE"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"DATE"})}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"date64"}),(0,s.jsx)(d.td,{children:"int64_t milliseconds since the UNIX epoch"}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"DATE"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"TIMESTAMP"})}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"timestamp"}),(0,s.jsx)(d.td,{children:"Exact timestamp encoded with int64 since UNIX epoch, seconds or milliseconds"}),(0,s.jsxs)(d.td,{children:[(0,s.jsx)(d.code,{children:"TIMESTAMP_S"}),", ",(0,s.jsx)(d.code,{children:"TIMESTAMP_MS"})]}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"TIMESTAMP"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"TIMESTAMP"})})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"time32"}),(0,s.jsx)(d.td,{children:"Time as signed 32-bit integer, seconds or milliseconds since midnight."}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"TIME"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"TIME"})}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"time64"}),(0,s.jsx)(d.td,{children:"Time as signed 64-bit integer, microseconds or nanoseconds since midnight."}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"TIME"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"TIME"})}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"interval_months"}),(0,s.jsx)(d.td,{children:"YEAR_MONTH interval in SQL style."}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"interval_day_time"}),(0,s.jsx)(d.td,{children:"DAY_TIME interval in SQL style."}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"decimal128"}),(0,s.jsx)(d.td,{children:"Precision- and scale-based decimal type with 128 bits."}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"DOUBLE"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"DECIMAL(38, 10)"})}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"DECIMAL(38, 10)"})})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"decimal"}),(0,s.jsx)(d.td,{children:"Defined for backward-compatibility."}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"decimal256"}),(0,s.jsx)(d.td,{children:"Precision- and scale-based decimal type with 256 bits."}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"list"}),(0,s.jsx)(d.td,{children:"A list of some logical data type."}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{children:(0,s.jsx)(d.code,{children:"TYPE[]"})})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"struct"}),(0,s.jsx)(d.td,{children:"Struct of logical types."}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"sparse_union"}),(0,s.jsx)(d.td,{children:"Sparse unions of logical types."}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"dense_union"}),(0,s.jsx)(d.td,{children:"Dense unions of logical types."}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"dictionary"}),(0,s.jsx)(d.td,{children:"Dictionary-encoded type,"}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"map"}),(0,s.jsx)(d.td,{children:"Map, a repeated struct logical type."}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"extension"}),(0,s.jsx)(d.td,{children:"Custom data type, implemented by user."}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"fixed_size_list"}),(0,s.jsx)(d.td,{children:"Fixed size list of some logical type."}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"duration"}),(0,s.jsx)(d.td,{children:"Elapsed time in seconds, milliseconds, microseconds or nanoseconds."}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"large_string"}),(0,s.jsx)(d.td,{children:"Like STRING, but with 64-bit offsets."}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"large_binary"}),(0,s.jsx)(d.td,{children:"Like BINARY, but with 64-bit offsets."}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"large_list"}),(0,s.jsx)(d.td,{children:"Like LIST, but with 64-bit offsets."}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"interval_month_day_nano"}),(0,s.jsx)(d.td,{children:"Calendar interval type with three fields."}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"run_end_encoded"}),(0,s.jsx)(d.td,{children:"Run-end encoded data."}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"string_view"}),(0,s.jsx)(d.td,{children:"UTF8 view type with 4-byte prefix & inline small string optimization."}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"binary_view"}),(0,s.jsx)(d.td,{children:"Bytes view type with 4-byte prefix and inline small string optimization."}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"list_view"}),(0,s.jsx)(d.td,{children:"A list of some logical data type represented by offset and size."}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{})]}),(0,s.jsxs)(d.tr,{children:[(0,s.jsx)(d.td,{children:"large_list_view"}),(0,s.jsx)(d.td,{children:"Like LIST_VIEW, but with 64-bit offsets and sizes."}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{}),(0,s.jsx)(d.td,{})]})]})]}),"\n",(0,s.jsxs)(d.p,{children:["Note: Where ",(0,s.jsx)(d.code,{children:"TYPE"})," is used (e.g. ",(0,s.jsx)(d.code,{children:"TYPE[]"}),"), it refers an established supported type for the specific data accelerator (e.g. ",(0,s.jsx)(d.code,{children:"INTEGER[]"}),")."]})]})}function h(e={}){const{wrapper:d}={...(0,i.R)(),...e.components};return d?(0,s.jsx)(d,{...e,children:(0,s.jsx)(j,{...e})}):j(e)}},8453:(e,d,t)=>{t.d(d,{R:()=>r,x:()=>c});var s=t(6540);const i={},n=s.createContext(i);function r(e){const d=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(d):{...d,...e}}),[d,e])}function c(e){let d;return d=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(n.Provider,{value:d},e.children)}}}]);