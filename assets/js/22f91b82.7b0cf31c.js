"use strict";(self.webpackChunkspiceaidocs=self.webpackChunkspiceaidocs||[]).push([[1163],{2167:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>l});var s=a(4848),r=a(8453);const t={title:"GraphQL Data Connector",sidebar_label:"GraphQL Data Connector",description:"GraphQL Data Connector Documentation"},o=void 0,i={id:"components/data-connectors/graphql",title:"GraphQL Data Connector",description:"GraphQL Data Connector Documentation",source:"@site/docs/components/data-connectors/graphql.md",sourceDirName:"components/data-connectors",slug:"/components/data-connectors/graphql",permalink:"/components/data-connectors/graphql",draft:!1,unlisted:!1,editUrl:"https://github.com/spiceai/docs/tree/trunk/spiceaidocs/docs/components/data-connectors/graphql.md",tags:[],version:"current",frontMatter:{title:"GraphQL Data Connector",sidebar_label:"GraphQL Data Connector",description:"GraphQL Data Connector Documentation"},sidebar:"docsSidebar",previous:{title:"GitHub Data Connector",permalink:"/components/data-connectors/github"},next:{title:"HTTP(s) Data Connector",permalink:"/components/data-connectors/https"}},c={},l=[{value:"Configuration",id:"configuration",level:2},{value:"Examples",id:"examples",level:3},{value:"Pagination",id:"pagination",level:2},{value:"Working with JSON Data",id:"working-with-json-data",level:2},{value:"Accessing objects fields",id:"accessing-objects-fields",level:3},{value:"Piping array into rows",id:"piping-array-into-rows",level:3},{value:"Unnesting object properties",id:"unnesting-object-properties",level:3},{value:"Unnesting Duplicate Columns",id:"unnesting-duplicate-columns",level:4}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.a,{href:"https://graphql.org/",children:"GraphQL"})," Data Connector enables federated SQL queries on any GraphQL endpoint by specifying ",(0,s.jsx)(n.code,{children:"graphql"})," as the selector in the ",(0,s.jsx)(n.code,{children:"from"})," value for the dataset."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"datasets:\n  - from: graphql:your-graphql-endpoint\n    name: my_dataset\n    params:\n      json_pointer: /data/some/nodes\n      graphql_query: |\n        {\n          some {\n            nodes {\n              field1\n              field2\n            }\n          }\n        }\n"})}),"\n",(0,s.jsx)(n.admonition,{title:"Limitations",type:"warning",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The GraphQL data connector does not support variables in the query."}),"\n",(0,s.jsx)(n.li,{children:"Filter pushdown is not currently supported; however, when using the limit, the connector will request only the necessary data."}),"\n"]})}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["The GraphQL data connector can be configured by providing the following ",(0,s.jsx)(n.code,{children:"params"}),". Use the ",(0,s.jsx)(n.a,{href:"/components/secret-stores/",children:"secret replacement syntax"})," to load the password from a secret store, e.g. ",(0,s.jsx)(n.code,{children:"${secrets:my_graphql_auth_token}"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"unnest_depth"}),": Depth level to automatically unnest objects to. By default, disabled if unspecified or ",(0,s.jsx)(n.code,{children:"0"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"graphql_auth_token"}),": The authentication token to use to connect to the GraphQL server. Uses bearer authentication."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"graphql_auth_user"}),": The username to use for basic auth. E.g. ",(0,s.jsx)(n.code,{children:"graphql_auth_user: my_user"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"graphql_auth_pass"}),": The password to use for basic auth. E.g. ",(0,s.jsx)(n.code,{children:"graphql_auth_pass: ${secrets:my_graphql_auth_pass}"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"graphql_query"}),": The GraphQL query to execute. E.g."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"query: |\n  {\n    some {\n      nodes {\n        field1\n        field2\n      }\n    }\n  }\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"json_pointer"}),": The ",(0,s.jsx)(n.a,{href:"https://datatracker.ietf.org/doc/html/rfc6901",children:"JSON pointer"})," pointing to the JSON data in the response."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"examples",children:"Examples"}),"\n",(0,s.jsxs)(n.p,{children:["Example using the GitHub GraphQL API and Bearer Auth. The following will use ",(0,s.jsx)(n.code,{children:"json_pointer"})," to retrieve all of the nodes in starredRepositories:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"from: graphql:https://api.github.com/graphql\nname: stars\nparams:\n  graphql_auth_token: ${env:GITHUB_TOKEN}\n  json_pointer: /data/viewer/starredRepositories/nodes\n  graphql_query: |\n    {\n      viewer {\n        starredRepositories {\n          nodes {\n            name\n            stargazerCount\n            languages (first: 10) {\n              nodes {\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["To get access to a specific node in starredRepositories, use the index in the ",(0,s.jsx)(n.code,{children:"json_pointer"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"from: graphql:https://api.github.com/graphql\nname: stars\nparams:\n  graphql_auth_token: ${env:GITHUB_TOKEN}\n  json_pointer: /data/viewer/starredRepositories/nodes/0\n  graphql_query: |\n    {\n      viewer {\n        starredRepositories {\n          nodes {\n            name\n            stargazerCount\n            languages (first: 10) {\n              nodes {\n                name\n              }\n            }\n          }\n        }\n      }\n    }\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"Example using Basic Auth:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"from: graphql:https://my-site.com/graphql\nname: my_dataset\nparams:\n  graphql_auth_user: ${env:GRAPHQL_USER}\n  graphql_auth_pass: ${env:GRAPHQL_PASS}\n  json_pointer: /data/some/nodes\n  graphql_query: |\n    {\n      some {\n        nodes {\n          field1\n          field2\n        }\n      }\n    }\n"})}),"\n",(0,s.jsx)(n.h2,{id:"pagination",children:"Pagination"}),"\n",(0,s.jsxs)(n.p,{children:["The GraphQL Data Connector supports automatic pagination of the response for queries using ",(0,s.jsx)(n.a,{href:"https://graphql.org/learn/pagination/",children:"cursor pagination"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["In order to enable pagination you need to specify ",(0,s.jsx)(n.code,{children:"first"})," and ",(0,s.jsx)(n.code,{children:"pageInfo"})," with both ",(0,s.jsx)(n.code,{children:"endCursor"})," and ",(0,s.jsx)(n.code,{children:"hasNextPage"})," fields. The ",(0,s.jsx)(n.code,{children:"json_pointer"})," must point to the field which is the child of the paginated resource."]}),"\n",(0,s.jsx)(n.p,{children:"Example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'from: graphql:https://api.github.com/graphql\nname: stargazers\nparams:\n  graphql_auth_token: ${env:GITHUB_TOKEN}\n  json_pointer: /data/repository/stargazers/edges\n  graphql_query: |\n    {\n      repository(name: "spiceai", owner: "spiceai") {\n        id\n        name\n        stargazers(first: 100) {\n          edges {\n            node {\n              id\n              name\n              login\n            }\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n\n      }\n    }\ndescription: spiceai stargazers\nacceleration:\n  enabled: true\n  refresh_mode: full\n  refresh_check_interval: 30m\n'})}),"\n",(0,s.jsx)(n.h2,{id:"working-with-json-data",children:"Working with JSON Data"}),"\n",(0,s.jsxs)(n.p,{children:["Tips for working with JSON data. For more information see ",(0,s.jsx)(n.a,{href:"https://datafusion.apache.org/user-guide/sql/scalar_functions.html#array-functions",children:"Datafusion Docs"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"accessing-objects-fields",children:"Accessing objects fields"}),"\n",(0,s.jsx)(n.p,{children:"You can access the fields of the object using the square bracket notation.\nArrays are indexed from 1."}),"\n",(0,s.jsxs)(n.p,{children:["Example for the stargazers query from ",(0,s.jsx)(n.a,{href:"#pagination",children:"pagination section"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sql> select node['login'] as login, node['name'] as name from stargazers limit 5;\n+--------------+----------------------+\n| login        | name                 |\n+--------------+----------------------+\n| simsieg      | Simon Siegert        |\n| davidmathers | David Mathers        |\n| ahmedtadde   | Ahmed Tadde          |\n| lordhamlet   | Shih-Fen Cheng       |\n| thinmy       | Thinmy Patrick Alves |\n+--------------+----------------------+\n"})}),"\n",(0,s.jsx)(n.h3,{id:"piping-array-into-rows",children:"Piping array into rows"}),"\n",(0,s.jsxs)(n.p,{children:["You can use Datafusion ",(0,s.jsx)(n.code,{children:"unnest"})," function to pipe values from array into rows.\nWe'll be using ",(0,s.jsx)(n.a,{href:"https://countries.trevorblades.com",children:"countries GraphQL api"})," as an example."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"from: graphql:https://countries.trevorblades.com\nname: countries\nparams:\n  json_pointer: /data/continents\n  graphql_query: |\n    {\n      continents {\n        name\n        countries {\n          name\n          capital\n        }\n      }\n    }\n\ndescription: countries\nacceleration:\n  enabled: true\n  refresh_mode: full\n  refresh_check_interval: 30m\n"})}),"\n",(0,s.jsx)(n.p,{children:"Example query:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sql> select continent, country['name'] as country, country['capital'] as capital\nfrom (select name as continent, unnest(countries) as country from countries)\nwhere continent = 'North America' limit 5;\n+---------------+---------------------+--------------+\n| continent     | country             | capital      |\n+---------------+---------------------+--------------+\n| North America | Antigua and Barbuda | Saint John's |\n| North America | Anguilla            | The Valley   |\n| North America | Aruba               | Oranjestad   |\n| North America | Barbados            | Bridgetown   |\n| North America | Saint Barth\xe9lemy    | Gustavia     |\n+---------------+---------------------+--------------+\n"})}),"\n",(0,s.jsx)(n.h3,{id:"unnesting-object-properties",children:"Unnesting object properties"}),"\n",(0,s.jsxs)(n.p,{children:["You can also use the ",(0,s.jsx)(n.code,{children:"unnest_depth"})," parameter to control automatic unnesting of objects from GraphQL responses."]}),"\n",(0,s.jsx)(n.p,{children:"This examples uses the GitHub stargazers endpoint:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:'from: graphql:https://api.github.com/graphql\nname: stargazers\nparams:\n  graphql_auth_token: ${env:GITHUB_TOKEN}\n  unnest_depth: 2\n  json_pointer: /data/repository/stargazers/edges\n  graphql_query: |\n    {\n      repository(name: "spiceai", owner: "spiceai") {\n        id\n        name\n        stargazers(first: 100) {\n          edges {\n            node {\n              id\n              name\n              login\n            }\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n\n      }\n    }\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If ",(0,s.jsx)(n.code,{children:"unnest_depth"})," is set to 0, or unspecified, object unnesting is disabled. When enabled, unnesting automatically moves nested fields to the parent level."]}),"\n",(0,s.jsx)(n.p,{children:"Without unnesting, stargazers data looks like this in a query:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sql> select node from stargazers limit 1;\n+------------------------------------------------------------+\n| node                                                       |\n+------------------------------------------------------------+\n| {id: MDQ6VXNlcjcwNzIw, login: ashtom, name: Thomas Dohmke} |\n+------------------------------------------------------------+\n"})}),"\n",(0,s.jsx)(n.p,{children:"With unnesting, these properties are automatically placed into their own columns:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"sql> select node from stargazers limit 1;\n+------------------+--------+---------------+\n| id               | login  | name          |\n+------------------+--------+---------------+\n| MDQ6VXNlcjcwNzIw | ashtom | Thomas Dohmke |\n+------------------+--------+---------------+\n"})}),"\n",(0,s.jsx)(n.h4,{id:"unnesting-duplicate-columns",children:"Unnesting Duplicate Columns"}),"\n",(0,s.jsx)(n.p,{children:"By default, the Spice Runtime will error when a duplicate column is detected during unnesting."}),"\n",(0,s.jsxs)(n.p,{children:["For example, this example ",(0,s.jsx)(n.code,{children:"spicepod.yml"})," query would fail due to ",(0,s.jsx)(n.code,{children:"name"})," fields:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"from: graphql:https://localhost\nname: stargazers\nparams:\n  unnest_depth: 2\n  json_pointer: /data/users\n  graphql_query: |\n    query {\n      users {\n        name\n        emergency_contact {\n          name\n        }\n      }\n    }\n"})}),"\n",(0,s.jsx)(n.p,{children:"This example would fail with a runtime error:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"WARN runtime: GraphQL Data Connector Error: Invalid object access. Column 'name' already exists in the object.\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Avoid this error by ",(0,s.jsx)(n.a,{href:"https://www.apollographql.com/docs/kotlin/advanced/using-aliases/",children:"using aliases in the query"})," where possible. In the example above, a duplicate error was introduced from ",(0,s.jsx)(n.code,{children:"emergency_contact { name }"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["The example below uses a GraphQL alias to rename ",(0,s.jsx)(n.code,{children:"emergency_contact.name"})," as ",(0,s.jsx)(n.code,{children:"emergencyContactName"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"from: graphql:https://localhost\nname: stargazers\nparams:\n  unnest_depth: 2\n  json_pointer: /data/people\n  graphql_query: |\n    query {\n      users {\n        name\n        emergency_contact {\n          emergencyContactName: name\n        }\n      }\n    }\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>i});var s=a(6540);const r={},t=s.createContext(r);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);