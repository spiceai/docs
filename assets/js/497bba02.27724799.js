"use strict";(self.webpackChunkspiceaidocs=self.webpackChunkspiceaidocs||[]).push([[56],{8083:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var n=t(4848),i=t(8453);const s={title:"File Formats",sidebar_label:"File Formats",sidebar_position:5,pagination_prev:"reference/index",pagination_next:null},a=void 0,o={id:"reference/file_format",title:"File Formats",description:"Spice currently supports CSV and Parquet data file-formats. Support for Iceberg and other file-formats are on the roadmap.",source:"@site/docs/reference/file_format.md",sourceDirName:"reference",slug:"/reference/file_format",permalink:"/reference/file_format",draft:!1,unlisted:!1,editUrl:"https://github.com/spiceai/docs/tree/trunk/spiceaidocs/docs/reference/file_format.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"File Formats",sidebar_label:"File Formats",sidebar_position:5,pagination_prev:"reference/index",pagination_next:null},sidebar:"docsSidebar",previous:{title:"Reference",permalink:"/reference/"}},c={},l=[{value:"CSV",id:"csv",level:2},{value:"Parameters",id:"parameters",level:3}];function d(e){const r={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.p,{children:"Spice currently supports CSV and Parquet data file-formats. Support for Iceberg and other file-formats are on the roadmap."}),"\n",(0,n.jsx)(r.p,{children:"The parameters supported for specific file-format are detailed on this page."}),"\n",(0,n.jsx)(r.h2,{id:"csv",children:"CSV"}),"\n",(0,n.jsx)(r.h3,{id:"parameters",children:"Parameters"}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"csv_has_header"}),": Optional. Indicate if the CSV file has header row. Defaults to ",(0,n.jsx)(r.code,{children:"true"})]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"csv_quote"}),": Optional. A one-character string used to quote fields containing special characters. Defaults to ",(0,n.jsx)(r.code,{children:'"'})]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"csv_escape"}),": Optional. A one-character string used to represent special characters or to include characters that would normally be interpreted as delimiters or new line characters within a field value. Defaults to ",(0,n.jsx)(r.code,{children:"null"})]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"csv_schema_infer_max_records"}),": Optional. A number used to set the limit in terms of records to scan to infer the schema. Defaults to ",(0,n.jsx)(r.code,{children:"1000"})]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.code,{children:"csv_delimiter"}),": Optional. A one-character string used to separate individual fields. Defaults to ",(0,n.jsx)(r.code,{children:","})]}),"\n"]})]})}function p(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,r,t)=>{t.d(r,{R:()=>a,x:()=>o});var n=t(6540);const i={},s=n.createContext(i);function a(e){const r=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),n.createElement(s.Provider,{value:r},e.children)}}}]);