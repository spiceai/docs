openapi: "3.0.3"
info:
  description: ""
  version: "0.5.1-alpha"
  title: "Spice.ai"
servers:
  - url: http://localhost:8000/api/v0.1
tags:
  - name: "pods"
  - name: "train"
  - name: "observations"
  - name: "recommendation"
  - name: "import/export"
    description: "Import and Export a pod that has been trained"
  - name: "training_runs"
    description: Individual training runs. i.e. training three times will produce three training runs
paths:
  /pods:
    get:
      tags:
        - "pods"
      summary: "Retrieves all of the registered pods"
      responses:
        "200":
          description: "Retrieved pods successfully"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Pod"
              examples:
                trader-example:
                  summary: Example for a pod named "trader"
                  value:
                    [
                      {
                        "name": "trader",
                        "manifest_path": "/userapp/.spice/pods/trader.yaml",
                      },
                    ]
  /pods/{pod}:
    get:
      tags:
        - "pods"
      summary: "Retrieves the specified pod"
      parameters:
        - name: "pod"
          in: "path"
          description: "name of the pod to return"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved the specified pod successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pod"
              examples:
                trader-example:
                  summary: Example for a pod named "trader"
                  value:
                    {
                      "name": "trader",
                      "manifest_path": "/userapp/.spice/pods/trader.yaml",
                    }

        "404":
          description: "Pod not found"
  /pods/{pod}/train:
    post:
      tags:
        - "train"
      summary: "Starts a training run for the specified pod"
      parameters:
        - name: "pod"
          in: "path"
          description: "name of the pod to train"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "The configurable parameters for a training run"
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TrainRequest"
            examples:
              dql-example:
                summary: Start a training run with 5 episodes and the DQL learning agent
                value: |
                  {
                    "learning_algorithm": "dql",
                    "number_episodes": 5
                  }
      responses:
        "200":
          description: "Pod started training"
        "404":
          description: "Pod not found"
        "500":
          description: "An internal error occurred in the AI Engine"
  /pods/{pod}/observations:
    get:
      tags:
        - "observations"
      summary: "Retrieve the cached observations in csv format"
      parameters:
        - name: "pod"
          in: "path"
          description: "name of the pod"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved the cached observations successfully"
          content:
            text/csv:
              schema:
                type: string
              examples:
                trader-example:
                  summary: Get observations for a pod named "trader"
                  value: |
                    time,coinbase.btcusd.close,local.portfolio.btc_balance,local.portfolio.usd_balance
                    1605312000,16254.51,,
                    1605313800,16305,,
                    1605315600,16222.16,,
                    1605317400,16214.15,,
                    1605319200,16223.08,,
                    1605321000,16185.68,,
                    1605322800,16202.24,,
                    1605324600,16194.21,,
                    1605326400,16159.4,,
                    1605328200,16152.36,,
                    1605330000,16100.84,,
                    1605331800,16180.01,,
                    1605333600,16191.84,,
        "404":
          description: "Pod not found"
    post:
      tags:
        - "observations"
      summary: "Adds new observations in csv format"
      parameters:
        - name: "pod"
          in: "path"
          description: "name of the pod"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "CSV data to add as observations"
        required: true
        content:
          application/json:
            schema:
              type: string
            examples:
              trader-example:
                summary: Add observations for a pod named "trader"
                value: |
                  time,coinbase.btcusd.close
                  1607909400,100.00
                  1607911200,200.00
                  1607913000,300.00
                  1607914800,400.00
                  1607916600,500.00
                  1607918400,600.00
                  1607920200,700.00
                  1607922000,800.00
      responses:
        "201":
          description: "Observations added successfully"
        "400":
          description: "Encountered an error processing the csv data"
        "404":
          description: "Pod not found"
  /pods/{pod}/dataspaces/{dataspace_from}/{dataspace_name}/data:
    post:
      tags:
        - "observations"
      summary: "Adds new observations to a dataspace"
      parameters:
        - name: "pod"
          in: "path"
          description: "name of the pod"
          required: true
          schema:
            type: "string"
        - name: "dataspace_from"
          in: "path"
          description: "the 'from' qualifier in the dataspace name"
          required: true
          schema:
            type: "string"
        - name: "dataspace_name"
          in: "path"
          description: "the name of the dataspace to add new observations to"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Data to add as observations"
        required: true
        content:
          text/csv:
            schema:
              type: "string"
            examples:
              csv-example:
                summary: Add observations for a pod by CSV
                value: |
                  time,close
                  1607909400,100.00
                  1607911200,200.00
                  1607913000,300.00
                  1607914800,400.00
                  1607916600,500.00
                  1607918400,600.00
                  1607920200,700.00
                  1607922000,800.00
          application/json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/Observation"
            examples:
              json-example:
                summary: Add observations for a pod by JSON
                value: |
                  [
                    {
                      "identifiers": {
                        "eventId": "806.42"
                      },
                      "measurements": {
                        "rating": 86,
                        "speed": 15,
                        "height": 29
                      },
                      "categories": {
                        "target": "42"
                      },
                      "tags": ["tagA", "tagB"],
                      "time": 1605312000
                    },
                    {
                      "identifiers": {
                        "eventId": "806.42"
                      },
                      "measurements": {
                        "rating": 86,
                        "speed": 15,
                        "height": 29
                      },
                      "categories": {
                        "target": "42"
                      },
                      "tags": ["tagC", "tagD"],
                      "time": "2020-09-14T22:04:00.413Z"
                    }
                  ]
      responses:
        "201":
          description: "Observations added successfully"
        "400":
          description: "Encountered an error processing the JSON data"
        "404":
          description: "Pod not found"
  /pods/{pod}/recommendation:
    get:
      tags:
        - "recommendation"
      summary: "Gets a recommended action to take from the latest observation data"
      parameters:
        - name: "pod"
          in: "path"
          description: "name of the pod"
          required: true
          schema:
            type: "string"
        - name: "time"
          schema:
            type: "string"
          in: "query"
          description: "The point in time at which to request the recommendation"
      responses:
        "200":
          description: "Successfully retrieved the recommendation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recommendation"
              example:
                {
                  "response": { "result": "ok" },
                  "start": 1607886000,
                  "end": 1607907600,
                  "action": "sell",
                  "confidence": 0.741,
                  "tag": "latest",
                }
        "400":
          description: "An invalid {time} was specified for the recommendation"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  response:
                    $ref: "#/components/schemas/Response"
              example:
                {
                  "response":
                    {
                      "result": "invalid_recommendation_time",
                      "message": "The time specified (1610060201) is outside of the allowed range: (1610057600, 1610060200)",
                      "error": true,
                    },
                }
        "404":
          description: "Pod not found"
  /pods/{pod}/interpretations:
    get:
      tags:
        - "interpretations"
      summary: "Gets interpretations for the pod time period"
      parameters:
        - name: "pod"
          in: "path"
          description: "name of the pod"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "An array of interpretation objects"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Interpretation"
              example: |
                [
                  {
                    "start": 1605333600,
                    "end": 1605333601,
                    "name": "e2e-test-interpretation",
                    "actions": ["small_buy"],
                    "tags": ["tag_a"]
                  }
                ]
        "404":
          description: "Pod not found"
    post:
      tags:
        - "interpretations"
      summary: "Adds new interpretations to the pod"
      parameters:
        - name: "pod"
          in: "path"
          description: "name of the pod"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "An array of intepretation objects"
        required: true
        content:
          application/json:
            schema:
              type: "array"
              items:
                $ref: "#/components/schemas/Interpretation"
            examples:
              trader-example:
                summary: "Add interpretations to the trader pod"
                value: |
                  [
                    {
                      "start": 1605333600,
                      "end": 1605333601,
                      "name": "e2e-test-interpretation",
                      "actions": ["small_buy"],
                      "tags": ["D"]
                    }
                  ]
      responses:
        "201":
          description: "Interpretations added successfully"
        "400":
          description: "Encountered an error processing the JSON data"
        "404":
          description: "Pod not found"
  /pods/{pod}/export:
    post:
      tags:
        - "import/export"
      summary: "Export a pod that has done at least one training run - filename must end in .spicepod"
      parameters:
        - name: "pod"
          in: "path"
          description: "name of the pod"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Export request parameters"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExportRequest"
            examples:
              trader-example:
                summary: Export to "/Users/spiceuser/Desktop/trader.spicepod"
                value: |
                  {
                    "directory": "/Users/spiceuser/Desktop",
                    "filename": "trader.spicepod"
                  }
      responses:
        "200":
          description: "Exported successfully"
        "400":
          description: "The parameters were invalid"
        "404":
          description: "Pod not found"
  /pods/{pod}/import:
    post:
      tags:
        - "import/export"
      summary: "Import a pod that has been previously exported to a .spicepod archive"
      parameters:
        - name: "pod"
          in: "path"
          description: "name of the pod"
          required: true
          schema:
            type: "string"
      requestBody:
        description: "Import request parameters"
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImportRequest"
            examples:
              trader-example:
                summary: Import from "/Users/spiceuser/Desktop/trader.spicepod"
                value: |
                  {
                    "archive_path": "/Users/spiceuser/Desktop/trader.spicepod"
                  }
      responses:
        "200":
          description: "Imported successfully"
        "400":
          description: "The parameters were invalid"
        "404":
          description: "Pod not found"
  /pods/{pod}/training_runs:
    get:
      tags:
        - "training_runs"
      summary: "Retrieves all of the training runs this pod has run"
      parameters:
        - name: "pod"
          in: "path"
          description: "name of the pod"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Successfully retrieves all of the training runs"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TrainingRun"
              examples:
                trader-example:
                  value: |
                    [
                      {
                        "start": 1630665782,
                        "end": 1630665787,
                        "episodes": [
                          {
                            "start": 1630665783,
                            "end": 1630665783,
                            "score": -473.8,
                            "actions_taken": {
                              "buy": 53,
                              "hold": 38,
                              "sell": 41
                            }
                          },
                          {
                            "episode": 1,
                            "start": 1630665783,
                            "end": 1630665784,
                            "score": -449.3,
                            "actions_taken": {
                              "buy": 42,
                              "hold": 43,
                              "sell": 47
                            }
                          },
                          {
                            "episode": 2,
                            "start": 1630665784,
                            "end": 1630665784,
                            "score": -375.8,
                            "actions_taken": {
                              "buy": 36,
                              "hold": 58,
                              "sell": 38
                            }
                          },
                          {
                            "episode": 3,
                            "start": 1630665784,
                            "end": 1630665785,
                            "score": -361.1,
                            "actions_taken": {
                              "buy": 33,
                              "hold": 61,
                              "sell": 38
                            }
                          },
                          {
                            "episode": 4,
                            "start": 1630665785,
                            "end": 1630665785,
                            "score": -370.9,
                            "actions_taken": {
                              "buy": 39,
                              "hold": 59,
                              "sell": 34
                            }
                          },
                          {
                            "episode": 5,
                            "start": 1630665785,
                            "end": 1630665786,
                            "score": -277.8,
                            "actions_taken": {
                              "buy": 35,
                              "hold": 78,
                              "sell": 19
                            }
                          },
                          {
                            "episode": 6,
                            "start": 1630665786,
                            "end": 1630665786,
                            "score": -282.7,
                            "actions_taken": {
                              "buy": 30,
                              "hold": 77,
                              "sell": 25
                            }
                          },
                          {
                            "episode": 7,
                            "start": 1630665786,
                            "end": 1630665786,
                            "score": -189.6,
                            "actions_taken": {
                              "buy": 15,
                              "hold": 96,
                              "sell": 21
                            }
                          },
                          {
                            "episode": 8,
                            "start": 1630665786,
                            "end": 1630665787,
                            "score": -155.3,
                            "actions_taken": {
                              "buy": 15,
                              "hold": 103,
                              "sell": 14
                            }
                          },
                          {
                            "episode": 9,
                            "start": 1630665787,
                            "end": 1630665787,
                            "score": -101.4,
                            "actions_taken": {
                              "buy": 8,
                              "hold": 114,
                              "sell": 10
                            }
                          }
                        ]
                      }
                    ]
        "404":
          description: "Pod not found"
  /pods/{pod}/training_runs/{training_run}:
    get:
      tags:
        - "training_runs"
      summary: "Retrieves the specified training run for this pod"
      parameters:
        - name: "pod"
          in: "path"
          description: "name of the pod"
          required: true
          schema:
            type: "string"
        - name: "training_run"
          in: "path"
          description: "The ID of the training run"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved the training run successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TrainingRun"
              examples:
                trader-example:
                  value: |
                    {
                      "start": 1630665782,
                      "end": 1630665787,
                      "episodes": [
                        {
                          "start": 1630665783,
                          "end": 1630665783,
                          "score": -473.8,
                          "actions_taken": {
                            "buy": 53,
                            "hold": 38,
                            "sell": 41
                          }
                        },
                        {
                          "episode": 1,
                          "start": 1630665783,
                          "end": 1630665784,
                          "score": -449.3,
                          "actions_taken": {
                            "buy": 42,
                            "hold": 43,
                            "sell": 47
                          }
                        },
                        {
                          "episode": 2,
                          "start": 1630665784,
                          "end": 1630665784,
                          "score": -375.8,
                          "actions_taken": {
                            "buy": 36,
                            "hold": 58,
                            "sell": 38
                          }
                        },
                        {
                          "episode": 3,
                          "start": 1630665784,
                          "end": 1630665785,
                          "score": -361.1,
                          "actions_taken": {
                            "buy": 33,
                            "hold": 61,
                            "sell": 38
                          }
                        },
                        {
                          "episode": 4,
                          "start": 1630665785,
                          "end": 1630665785,
                          "score": -370.9,
                          "actions_taken": {
                            "buy": 39,
                            "hold": 59,
                            "sell": 34
                          }
                        },
                        {
                          "episode": 5,
                          "start": 1630665785,
                          "end": 1630665786,
                          "score": -277.8,
                          "actions_taken": {
                            "buy": 35,
                            "hold": 78,
                            "sell": 19
                          }
                        },
                        {
                          "episode": 6,
                          "start": 1630665786,
                          "end": 1630665786,
                          "score": -282.7,
                          "actions_taken": {
                            "buy": 30,
                            "hold": 77,
                            "sell": 25
                          }
                        },
                        {
                          "episode": 7,
                          "start": 1630665786,
                          "end": 1630665786,
                          "score": -189.6,
                          "actions_taken": {
                            "buy": 15,
                            "hold": 96,
                            "sell": 21
                          }
                        },
                        {
                          "episode": 8,
                          "start": 1630665786,
                          "end": 1630665787,
                          "score": -155.3,
                          "actions_taken": {
                            "buy": 15,
                            "hold": 103,
                            "sell": 14
                          }
                        },
                        {
                          "episode": 9,
                          "start": 1630665787,
                          "end": 1630665787,
                          "score": -101.4,
                          "actions_taken": {
                            "buy": 8,
                            "hold": 114,
                            "sell": 10
                          }
                        }
                      ]
                    }
        "404":
          description: "Pod not found"
  /pods/{pod}/training_runs/{training_run}/loggers/{logger_id}:
    get:
      tags:
        - "training_runs"
        - "training_loggers"
      summary: "Retrieves the address of the specified training logger."
      parameters:
        - name: "pod"
          in: "path"
          description: "name of the pod"
          required: true
          schema:
            type: "string"
        - name: "training_run"
          in: "path"
          description: "The ID of the training run"
          required: true
          schema:
            type: "string"
        - name: "logger_id"
          in: "path"
          description: "The ID of the training logger"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Retrieved the training logger address successfully"
          content:
            text/plain:
              examples:
                tensorboard-example:
                  value: |
                    http://localhost:6069/
        "404":
          description: "Pod, training run, or logger instance not found"
  /algorithms:
    get:
      tags:
        - "train"
      responses:
        "200":
          description: Returns a list of the available ML learning algorithms.
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/LearningAlgorithm"
              example:
                [
                  {
                    "algorithm_id": "dql",
                    "name": "Deep Q-Learning",
                    "docs_link": "https://docs.spiceai.org/deep-learning-ai/dql/",
                  },
                  {
                    "algorithm_id": "vpg",
                    "name": "Vanilla Policy Gradient",
                    "docs_link": "https://docs.spiceai.org/deep-learning-ai/vpg/",
                  },
                ]

components:
  schemas:
    Pod:
      type: "object"
      properties:
        name:
          type: "string"
        manifest_path:
          type: "string"
    Observation:
      type: "object"
      additionalProperties: false
      required: ["time", "data"]
      properties:
        identifiers:
          type: "object"
        measurements:
          type: "object"
        categories:
          type: "object"
        tags:
          items:
            type: "string"
          type: "array"
        time:
          anyOf:
            - type: "integer"
            - type: "string"
              format: "date-time"
    Recommendation:
      type: "object"
      properties:
        response:
          $ref: "#/components/schemas/Response"
        start:
          type: "integer"
          format: "int64"
        end:
          type: "integer"
          format: "int64"
        action:
          type: "string"
        confidence:
          type: "number"
          format: "float"
        tag:
          type: "string"
    Response:
      type: "object"
      properties:
        result:
          type: "string"
        message:
          type: "string"
        error:
          type: "boolean"
    ExportRequest:
      type: "object"
      properties:
        directory:
          type: "string"
          description: "The directory to place the exported Pod"
        filename:
          type: "string"
          description: "The name of the file that will contain the exported Pod: must end in .spicepod"
    Interpretation:
      type: "object"
      properties:
        start:
          type: "integer"
          format: "int64"
        end:
          type: "integer"
          format: "int64"
        name:
          type: "string"
        actions:
          type: "array"
          items:
            description: "A list of actions"
            type: string
        tags:
          type: "array"
          items:
            description: "A list of tags"
            type: string
    ImportRequest:
      type: "object"
      properties:
        archive_path:
          type: "string"
          description: "Path to the .spicepod archive to import"
    TrainRequest:
      type: "object"
      properties:
        learning_algorithm:
          type: "string"
          description: "The learning algorithm id to use in the requested training run"
        number_episodes:
          type: "integer"
          format: "int64"
    LearningAlgorithm:
      type: "object"
      properties:
        algorithm_id:
          type: "string"
          description: "The AI learning algorithm identifier"
        name:
          type: "string"
          description: "The AI learning algorithm name. i.e. Deep Q-Learning"
        docs_link:
          type: "string"
          description: "Link to Spice.ai docs where you can learn more about the algorithm"
    TrainingRun:
      type: "object"
      properties:
        start:
          type: "integer"
          format: "int64"
        end:
          type: "integer"
          format: "int64"
        episodes:
          type: "array"
          items:
            $ref: "#/components/schemas/Episode"
    mapInt64:
      type: "object"
      additionalProperties:
        type: "integer"
        format: "int64"
    Episode:
      type: "object"
      properties:
        episode:
          type: "integer"
          format: "int64"
        start:
          type: "integer"
          format: "int64"
        end:
          type: "integer"
          format: "int64"
        score:
          type: "number"
          format: "double"
        actions_taken:
          $ref: "#/components/schemas/mapInt64"
        error:
          type: "string"
        error_message:
          type: "string"
